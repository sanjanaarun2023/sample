import time
import random

class RadioUnit:
    def __init__(self, ru_id):
        self.ru_id = ru_id

    def send_signal(self, data):
        print(f"[RU-{self.ru_id}] Sending signal: {data}")
        return data

    def receive_signal(self, data):
        print(f"[RU-{self.ru_id}] Received signal: {data}")

class DistributedUnit:
    def __init__(self, du_id):
        self.du_id = du_id

    def process_signal(self, data):
        processed_data = f"Processed({data})"
        print(f"[DU-{self.du_id}] Processing signal: {data} -> {processed_data}")
        return processed_data

class CentralUnit:
    def __init__(self, cu_id):
        self.cu_id = cu_id

    def manage_connection(self, user_data):
        print(f"[CU-{self.cu_id}] Managing user session for: {user_data}")

class RIC:
    def __init__(self):
        self.policy = "Load Balancing"

    def apply_policy(self, component, data):
        print(f"[RIC] Applying {self.policy} policy on {component}: {data}")

# Simulation engine
def simulate_o_ran():
    ru = RadioUnit(ru_id=1)
    du = DistributedUnit(du_id=101)
    cu = CentralUnit(cu_id=201)
    ric = RIC()

    for user in range(3):
        user_data = f"UE{user+1}-data"
        ric.apply_policy("RU", user_data)
        
        signal = ru.send_signal(user_data)
        processed = du.process_signal(signal)
        cu.manage_connection(processed)
        ru.receive_signal(f"ACK for {user_data}")
        print("-" * 50)
        time.sleep(1)

if __name__ == "__main__":
    simulate_o_ran()
